import cv2 as cv
import PoseModule as pm
import mediapipe as mp
import numpy as np
import pose_equal_check as pec
import time

ctime = 0
ptime = time.time()

vid = cv.VideoCapture(0)
detector = pm.PoseDetector()
PoseSimilarityDetector = pec.PoseSimilarity()

pranamasana1 = cv.imread("Pranamasana1.png")
pranamasana1 = detector.findPose(pranamasana1)
landmarks1 = detector.findPosition(pranamasana1)
print("Landmarks1: ", landmarks1)
# cv.imshow("Pranamasan1", pranamasana1)

pranamasana2 = cv.imread("Pranamasana2.png")
pranamasana2 = detector.findPose(pranamasana2)
landmarks2 = detector.findPosition(pranamasana2)
print("Landmarks2: ", landmarks2)
cv.imshow("Pranamasan2", pranamasana2)

pranamasana3 = cv.imread("Pranamasana3.png")
pranamasana3 = detector.findPose(pranamasana3)
landmarks3 = detector.findPosition(pranamasana3)
print("Landmarks3: ", landmarks3)
# cv.imshow("Pranamasan3", pranamasana3)


Tahirpranamasana1 = cv.imread("TahirPranamasana1.jpg")
Tahirpranamasana1 = detector.findPose(Tahirpranamasana1)
Tahirlandmarks1 = detector.findPosition(Tahirpranamasana1)
# cv.imshow("Tahirpranamasana1", Tahirpranamasana1)

Tahirpranamasana2 = cv.imread("TahirPranamasana2.jpg")
Tahirpranamasana2 = detector.findPose(Tahirpranamasana2)
Tahirlandmarks2 = detector.findPosition(Tahirpranamasana2)
# cv.imshow("Tahirpranamasana2", Tahirpranamasana2)

landmarks1=  [[0.3953738212585449, 0.20374999940395355], [0.38989749550819397, 0.18610185384750366], [0.3893361985683441, 0.18598726391792297], [0.3885343372821808, 0.18594321608543396], [0.38750314712524414, 0.18606799840927124], [0.3853174149990082, 0.18612800538539886], [0.3827153146266937, 0.18628770112991333], [0.37402209639549255, 0.19282323122024536], [0.3680281639099121, 0.19483354687690735], [0.3934604823589325, 0.2226792275905609], [0.39001569151878357, 0.22123005986213684], [0.3770461976528168, 0.3014906346797943], [0.35468074679374695, 0.301906943321228], [0.40139564871788025, 0.41876643896102905], [0.3774908483028412, 0.43698590993881226], [0.4153616428375244, 0.3689888119697571], [0.4117788076400757, 0.374311238527298], [0.41498103737831116, 0.3374214768409729], [0.41576144099235535, 0.34627145528793335], [0.4106249511241913, 0.32788562774658203], [0.4105566442012787, 0.3341696262359619], [0.40850579738616943, 0.3367310166358948], [0.4074009954929352, 0.34219279885292053], [0.3843575417995453, 0.5438348054885864], [0.37354859709739685, 0.5485385656356812], [0.3696804940700531, 0.7450602650642395], [0.367846816778183, 0.7572095394134521], [0.3652409315109253, 0.9175801277160645], [0.3657536208629608, 0.9399347901344299], [0.35695680975914, 0.9465101957321167], [0.35776659846305847, 0.970260500907898], [0.41047248244285583, 0.9412384033203125], [0.4153122901916504, 0.9679312705993652]]


landmarks2=  [[0.6270935535430908, 0.18515565991401672], [0.6151561141014099, 0.16700379550457], [0.6129384636878967, 0.16634917259216309], [0.6104863286018372, 0.16572052240371704], [0.6139981746673584, 0.1674223095178604], [0.6109236478805542, 0.16714519262313843], [0.6071323752403259, 0.16699077188968658], [0.57137131690979, 0.174030140042305], [0.5726727247238159, 0.17644205689430237], [0.6209954619407654, 0.20167335867881775], [0.6171545386314392, 0.20126859843730927], [0.5140706896781921, 0.28270989656448364], [0.5287970900535583, 0.2790053188800812], [0.6002160906791687, 0.3896165192127228], [0.6333701014518738, 0.3925713002681732], [0.6503668427467346, 0.3027598559856415], [0.6774253845214844, 0.2904210686683655], [0.6632112264633179, 0.2660072445869446], [0.6835233569145203, 0.2581121027469635], [0.6449798941612244, 0.2620556950569153], [0.6647407412528992, 0.2522457242012024], [0.6363082528114319, 0.2741859257221222], [0.6576010584831238, 0.2619360685348511], [0.5162786841392517, 0.5306523442268372], [0.527372419834137, 0.5310379862785339], [0.45418256521224976, 0.7451866865158081], [0.4586453139781952, 0.7492026686668396], [0.40241679549217224, 0.9378176331520081], [0.40527722239494324, 0.9484351873397827], [0.3697521984577179, 0.9703879356384277], [0.36667850613594055, 0.9850091934204102], [0.5314492583274841, 0.956816554069519], [0.5383068323135376, 0.9694724082946777]]


landmarks3=  [[0.36865049600601196, 0.23947259783744812], [0.35443243384361267, 0.22776713967323303], [0.35180795192718506, 0.22779087722301483], [0.34881359338760376, 0.22772645950317383], [0.355216383934021, 0.22803927958011627], [0.35352009534835815, 0.2282552272081375], [0.35153913497924805, 0.22858060896396637], [0.3268224596977234, 0.24102020263671875], [0.3322475552558899, 0.24478188157081604], [0.3645496368408203, 0.2562238276004791], [0.3646756708621979, 0.25607481598854065], [0.3229488134384155, 0.3257937729358673], [0.33776918053627014, 0.3354610502719879], [0.37416401505470276, 0.414682537317276], [0.36320528388023376, 0.4352348744869232], [0.3864299952983856, 0.41034525632858276], [0.4031594693660736, 0.39914098381996155], [0.390863835811615, 0.41445350646972656], [0.40916553139686584, 0.4013671576976776], [0.3918919265270233, 0.3980827033519745], [0.4064139127731323, 0.3949343264102936], [0.3889828324317932, 0.39703357219696045], [0.40324848890304565, 0.3930032253265381], [0.35558104515075684, 0.5564305782318115], [0.35676509141921997, 0.5715057849884033], [0.35450178384780884, 0.723547637462616], [0.33973830938339233, 0.7536720633506775], [0.3282208740711212, 0.9002166986465454], [0.32825717329978943, 0.9182050228118896], [0.30775296688079834, 0.9362436532974243], [0.30787160992622375, 0.9571467041969299], [0.4075888395309448, 0.9318804740905762], [0.4132925271987915, 0.9446717500686646]]


def angle(a,b,c):
    a = np.array(a)
    b = np.array(b)
    c = np.array(c)

     # Calculate the vectors
    ab = a-b  # Vector from shoulder to elbow
    bc = b-c  # Vector from elbow to wrist

    # Calculate the angle using the dot product
    cosine_angle = np.dot(ab, bc) / (np.linalg.norm(ab) * np.linalg.norm(bc))
    angle = np.arccos(cosine_angle)  # Angle in radians

    return 180 - np.degrees(angle)  # Convert to degrees



while True:
    isTrue, frame = vid.read() 

    if isTrue:
        frame = detector.findPose(frame)
        lmlist = detector.findPosition(frame)
# or PoseSimilarityDetector.compare_poses(Tahirlandmarks1, lmlist, threshold=0.1) or PoseSimilarityDetector.compare_poses(Tahirlandmarks2, lmlist, threshold=0.1)
        if len(lmlist)>0:
            if PoseSimilarityDetector.compare_poses(landmarks1, lmlist, threshold=0.1) or PoseSimilarityDetector.compare_poses(landmarks2, lmlist, threshold=0.1) or PoseSimilarityDetector.compare_poses(landmarks3, lmlist, threshold=0.1):
                print("You are doing the right Pose.")    
            else:
                print("Your are doing the wrong asana, Please see the image provided.")

    ctime =  time.time()
    # print("time: ", ctime-ptime)
    ptime = ctime
    cv.imshow("UttanasaCheck", frame)
    cv.waitKey(10)

cv.destroyAllWindows()
